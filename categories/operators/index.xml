<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Operators on LOLCODE Documentation</title>
    <link>/categories/operators/</link>
    <description>Recent content in Operators on LOLCODE Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 May 2016 08:46:10 -0400</lastBuildDate>
    
	<atom:link href="/categories/operators/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Calling Syntax and Precedence</title>
      <link>/lolcode/precedence/</link>
      <pubDate>Thu, 05 May 2016 08:46:10 -0400</pubDate>
      
      <guid>/lolcode/precedence/</guid>
      <description>Mathematical operators and functions in general rely on prefix notation. By doing this, it is possible to call and compose operations with a minimum of explicit grouping. When all operators and functions have known arity, no grouping markers are necessary. In cases where operators have variable arity, the operation is closed with MKAY. An MKAY may be omitted if it coincides with the end of the line/statement, in which case the EOL stands in for as many MKAYs as there are open variadic functions.</description>
    </item>
    
    <item>
      <title>Math</title>
      <link>/lolcode/math/</link>
      <pubDate>Thu, 05 May 2016 08:46:10 -0400</pubDate>
      
      <guid>/lolcode/math/</guid>
      <description>Math The basic math operators are binary prefix operators.
SUM OF &amp;lt;x&amp;gt; AN &amp;lt;y&amp;gt; BTW + DIFF OF &amp;lt;x&amp;gt; AN &amp;lt;y&amp;gt; BTW - PRODUKT OF &amp;lt;x&amp;gt; AN &amp;lt;y&amp;gt; BTW * QUOSHUNT OF &amp;lt;x&amp;gt; AN &amp;lt;y&amp;gt; BTW / MOD OF &amp;lt;x&amp;gt; AN &amp;lt;y&amp;gt; BTW modulo BIGGR OF &amp;lt;x&amp;gt; AN &amp;lt;y&amp;gt; BTW max SMALLR OF &amp;lt;x&amp;gt; AN &amp;lt;y&amp;gt; BTW min &amp;lt;x&amp;gt; and &amp;lt;y&amp;gt; may each be expressions in the above, so mathematical operators can be nested and grouped indefinitely.</description>
    </item>
    
    <item>
      <title>Boolean</title>
      <link>/lolcode/boolean/</link>
      <pubDate>Thu, 05 May 2016 08:46:10 -0400</pubDate>
      
      <guid>/lolcode/boolean/</guid>
      <description>Boolean operators working on TROOFs are as follows:
BOTH OF &amp;lt;x&amp;gt; [AN] &amp;lt;y&amp;gt; BTW and: WIN iff x=WIN, y=WIN EITHER OF &amp;lt;x&amp;gt; [AN] &amp;lt;y&amp;gt; BTW or: FAIL iff x=FAIL, y=FAIL WON OF &amp;lt;x&amp;gt; [AN] &amp;lt;y&amp;gt; BTW xor: FAIL if x=y NOT &amp;lt;x&amp;gt; BTW unary negation: WIN if x=FAIL ALL OF &amp;lt;x&amp;gt; [AN] &amp;lt;y&amp;gt; ... MKAY BTW infinite arity AND ANY OF &amp;lt;x&amp;gt; [AN] &amp;lt;y&amp;gt; ... MKAY BTW infinite arity OR &amp;lt;x&amp;gt; and &amp;lt;y&amp;gt; in the expression syntaxes above are automatically cast as TROOF values if they are not already so.</description>
    </item>
    
    <item>
      <title>Comparison</title>
      <link>/lolcode/comparison/</link>
      <pubDate>Thu, 05 May 2016 08:46:10 -0400</pubDate>
      
      <guid>/lolcode/comparison/</guid>
      <description>Comparison is (currently) done with two binary equality operators:
BOTH SAEM &amp;lt;x&amp;gt; [AN] &amp;lt;y&amp;gt; BTW WIN iff x == y DIFFRINT &amp;lt;x&amp;gt; [AN] &amp;lt;y&amp;gt; BTW WIN iff x != y Comparisons are performed as integer math in the presence of two NUMBRs, but if either of the expressions are NUMBARs, then floating point math takes over. Otherwise, there is no automatic casting in the equality, so BOTH SAEM &amp;quot;3&amp;quot; AN 3 is FAIL.</description>
    </item>
    
    <item>
      <title>Concatenation</title>
      <link>/lolcode/concatenation/</link>
      <pubDate>Thu, 05 May 2016 08:46:10 -0400</pubDate>
      
      <guid>/lolcode/concatenation/</guid>
      <description>An indefinite number of YARNs may be explicitly concatenated with the SMOOSH...MKAY operator. Arguments may optionally be separated with AN. As the SMOOSH expects strings as its input arguments, it will implicitly cast all input values of other types to YARNs. The line ending may safely implicitly close the SMOOSH operator without needing an MKAY.</description>
    </item>
    
    <item>
      <title>Casting</title>
      <link>/lolcode/casting/</link>
      <pubDate>Thu, 05 May 2016 08:46:10 -0400</pubDate>
      
      <guid>/lolcode/casting/</guid>
      <description>Operators that work on specific types implicitly cast parameter values of other types. If the value cannot be safely cast, then it results in an error.
An expression&amp;rsquo;s value may be explicitly cast with the binary MAEK operator.
MAEK &amp;lt;expression&amp;gt; [A] &amp;lt;type&amp;gt; Where &amp;lt;type&amp;gt; is one of TROOF, YARN, NUMBR, NUMBAR, or NOOB. This is only for local casting: only the resultant value is cast, not the underlying variable(s), if any.</description>
    </item>
    
  </channel>
</rss>